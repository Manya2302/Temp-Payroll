import { useState, useEffect } from 'react';
import { useLocation, Link } from 'wouter';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import Layout from '@/components/layout/layout'
import { useToast } from '@/hooks/use-toast';
import { Plus, Sparkles, Calendar, Users, TrendingUp, CheckCircle2, Clock, AlertCircle, FolderOpen } from 'lucide-react';

export default function AdminProjects() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [projects, setProjects] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(false);
  const [generatingPlan, setGeneratingPlan] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState('all');

  const [formData, setFormData] = useState({
    projectTitle: '',
    description: '',
    assignedEmployees: [],
    startDate: '',
    endDate: '',
    preferredEndDate: '',
    priority: 'Medium',
    estimatedEffort: { value: 5, unit: 'days' },
    distributionSettings: { strategy: 'even-load', notes: '' },
    clientNotes: '',
    notes: ''
  });

  useEffect(() => {
    fetchProjects();
    fetchEmployees();
  }, []);

  const fetchProjects = async () => {
    try {
      const res = await fetch('/api/projects');
      if (res.ok) {
        const data = await res.json();
        setProjects(data);
      }
    } catch (error) {
      console.error('Failed to fetch projects:', error);
    }
  };

  const fetchEmployees = async () => {
    try {
      const res = await fetch('/api/employees');
      if (res.ok) {
        const data = await res.json();
        setEmployees(data.filter(emp => emp.status === 'active'));
      }
    } catch (error) {
      console.error('Failed to fetch employees:', error);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleEmployeeToggle = (empId, empName, empRole) => {
    setFormData(prev => {
      const exists = prev.assignedEmployees.find(e => e.userId === empId);
      if (exists) {
        return {
          ...prev,
          assignedEmployees: prev.assignedEmployees.filter(e => e.userId !== empId)
        };
      } else {
        return {
          ...prev,
          assignedEmployees: [...prev.assignedEmployees, { userId: empId, name: empName, role: empRole }]
        };
      }
    });
  };

  const handleCreateProject = async (e) => {
    e.preventDefault();

    if (!formData.projectTitle || !formData.description || formData.assignedEmployees.length === 0 || !formData.startDate) {
      toast({
        title: 'Missing fields',
        description: 'Please fill in all required fields',
        variant: 'destructive'
      });
      return;
    }

    setLoading(true);
    setGeneratingPlan(true);

    try {
      const res = await fetch('/api/projects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (res.ok) {
        const project = await res.json();
        toast({
          title: 'âœ¨ Project created successfully!',
          description: `${project.days.length}-day plan generated by AI`
        });
        setShowCreateForm(false);
        fetchProjects();
        resetForm();
      } else {
        const error = await res.json();
        toast({
          title: 'Failed to create project',
          description: error.message || 'Please try again',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to create project',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
      setGeneratingPlan(false);
    }
  };

  const resetForm = () => {
    setFormData({
      projectTitle: '',
      description: '',
      assignedEmployees: [],
      startDate: '',
      endDate: '',
      preferredEndDate: '',
      priority: 'Medium',
      estimatedEffort: { value: 5, unit: 'days' },
      distributionSettings: { strategy: 'even-load', notes: '' },
      clientNotes: '',
      notes: ''
    });
  };

  const getStatusColor = (status) => {
    const colors = {
      'Draft': 'bg-gray-500',
      'Scheduled': 'bg-blue-500',
      'Active': 'bg-green-500',
      'In Progress': 'bg-yellow-500',
      'Completed': 'bg-emerald-500',
      'On Hold': 'bg-orange-500',
      'Blocked': 'bg-red-500',
      'Archived': 'bg-gray-400'
    };
    return colors[status] || 'bg-gray-500';
  };

  const getPriorityColor = (priority) => {
    const colors = {
      'Low': 'bg-blue-100 text-blue-800',
      'Medium': 'bg-yellow-100 text-yellow-800',
      'High': 'bg-orange-100 text-orange-800',
      'Critical': 'bg-red-100 text-red-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  };

  const filteredProjects = projects.filter(p => {
    if (selectedFilter === 'all') return true;
    if (selectedFilter === 'active') return ['Scheduled', 'Active', 'In Progress'].includes(p.status);
    if (selectedFilter === 'completed') return p.status === 'Completed';
    if (selectedFilter === 'archived') return p.status === 'Archived';
    return true;
  });

  return (
    <Layout>
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Project Management</h1>
          <p className="text-muted-foreground">AI-powered task distribution and tracking</p>
        </div>
        <Button onClick={() => setShowCreateForm(!showCreateForm)} size="lg">
          <Plus className="mr-2 h-5 w-5" />
          Create Project
        </Button>
      </div>

      {showCreateForm && (
        <Card className="border-2 border-primary/20">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-primary" />
              Create New Project
            </CardTitle>
            <CardDescription>Fill in project details and let AI generate a day-by-day task plan</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleCreateProject} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="title">Project Title *</Label>
                  <Input
                    id="title"
                    value={formData.projectTitle}
                    onChange={(e) => handleInputChange('projectTitle', e.target.value)}
                    placeholder="e.g., Create admin dashboard for Blinkit"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="priority">Priority</Label>
                  <Select value={formData.priority} onValueChange={(val) => handleInputChange('priority', val)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Project Description *</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="Detailed description of the project scope and objectives"
                  rows={3}
                  required
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="startDate">Start Date *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="endDate">Preferred End Date</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={formData.preferredEndDate}
                    onChange={(e) => handleInputChange('preferredEndDate', e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="effort">Estimated Effort (days)</Label>
                  <Input
                    id="effort"
                    type="number"
                    min="1"
                    max="90"
                    value={formData.estimatedEffort.value}
                    onChange={(e) => handleInputChange('estimatedEffort', { ...formData.estimatedEffort, value: parseInt(e.target.value) })}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>Assign Employees * (Select one or more)</Label>
                <div className="border rounded-md p-4 max-h-48 overflow-y-auto grid grid-cols-2 gap-2">
                  {employees.map(emp => (
                    <label key={emp._id} className="flex items-center space-x-2 cursor-pointer hover:bg-accent p-2 rounded">
                      <input
                        type="checkbox"
                        checked={formData.assignedEmployees.some(e => e.userId === emp.userId)}
                        onChange={() => handleEmployeeToggle(emp.userId, `${emp.firstName} ${emp.lastName}`, emp.position)}
                        className="rounded"
                      />
                      <span className="text-sm">{emp.firstName} {emp.lastName}</span>
                      <span className="text-xs text-muted-foreground">({emp.position})</span>
                    </label>
                  ))}
                </div>
                {formData.assignedEmployees.length > 0 && (
                  <p className="text-sm text-muted-foreground">{formData.assignedEmployees.length} employee(s) selected</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="strategy">Distribution Strategy</Label>
                <Select
                  value={formData.distributionSettings.strategy}
                  onValueChange={(val) => handleInputChange('distributionSettings', { ...formData.distributionSettings, strategy: val })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="even-load">Even Load (Split tasks across employees)</SelectItem>
                    <SelectItem value="round-robin">Round Robin (Alternate days)</SelectItem>
                    <SelectItem value="split-by-days">Split by Days (Consecutive days)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="clientNotes">Client Notes</Label>
                <Textarea
                  id="clientNotes"
                  value={formData.clientNotes}
                  onChange={(e) => handleInputChange('clientNotes', e.target.value)}
                  placeholder="Any specific client requirements or notes"
                  rows={2}
                />
              </div>

              <div className="flex gap-3">
                <Button type="submit" disabled={loading} className="flex-1">
                  {generatingPlan ? (
                    <>
                      <Sparkles className="mr-2 h-4 w-4 animate-spin" />
                      Generating AI Plan...
                    </>
                  ) : (
                    <>
                      <Plus className="mr-2 h-4 w-4" />
                      Create Project
                    </>
                  )}
                </Button>
                <Button type="button" variant="outline" onClick={() => setShowCreateForm(false)}>
                  Cancel
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      <div className="flex gap-2">
        <Button
          variant={selectedFilter === 'all' ? 'default' : 'outline'}
          onClick={() => setSelectedFilter('all')}
          size="sm"
        >
          All
        </Button>
        <Button
          variant={selectedFilter === 'active' ? 'default' : 'outline'}
          onClick={() => setSelectedFilter('active')}
          size="sm"
        >
          Active
        </Button>
        <Button
          variant={selectedFilter === 'completed' ? 'default' : 'outline'}
          onClick={() => setSelectedFilter('completed')}
          size="sm"
        >
          Completed
        </Button>
        <Button
          variant={selectedFilter === 'archived' ? 'default' : 'outline'}
          onClick={() => setSelectedFilter('archived')}
          size="sm"
        >
          Archived
        </Button>
      </div>

      {filteredProjects.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <FolderOpen className="h-16 w-16 text-muted-foreground mb-4" />
            <p className="text-muted-foreground text-lg">No projects found</p>
            <p className="text-sm text-muted-foreground">Create your first project to get started</p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredProjects.map(project => (
            <Card key={project._id} className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => setLocation(`/admin/projects/${project._id}`)}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="text-lg line-clamp-1">{project.projectTitle}</CardTitle>
                  <Badge className={getPriorityColor(project.priority)}>{project.priority}</Badge>
                </div>
                <CardDescription className="line-clamp-2">{project.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center justify-between">
                  <Badge className={`${getStatusColor(project.status)} text-white`}>
                    {project.status}
                  </Badge>
                  <div className="flex items-center gap-1 text-sm text-muted-foreground">
                    <TrendingUp className="h-4 w-4" />
                    <span>{project.progress}%</span>
                  </div>
                </div>

                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Calendar className="h-4 w-4" />
                  <span>{new Date(project.startDate).toLocaleDateString()}</span>
                </div>

                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Users className="h-4 w-4" />
                  <span>{project.assignedEmployees.length} employee(s)</span>
                </div>

                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Clock className="h-4 w-4" />
                  <span>{project.days.length} days</span>
                </div>

                <div className="pt-2 border-t">
                  <div className="flex gap-1 text-xs">
                    <span className="text-green-600 font-medium">
                      {project.days.filter(d => d.status === 'completed' || d.status === 'approved').length} completed
                    </span>
                    <span className="text-muted-foreground">â€¢</span>
                    <span className="text-yellow-600 font-medium">
                      {project.days.filter(d => d.status === 'in_progress').length} in progress
                    </span>
                    <span className="text-muted-foreground">â€¢</span>
                    <span className="text-gray-600 font-medium">
                      {project.days.filter(d => d.status === 'pending').length} pending
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
      </Layout>
  );
}
